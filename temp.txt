import DB from '../db.js';

// ═══════════════════════════════════════════════════════════════
// FASHION SHOW LOGIC (NEW)
// ═══════════════════════════════════════════════════════════════

// Fashion Show Constants
const PARTICIPANTS_IN_ROOM = 4;
const VOTING_TIMER = 60;

// Global waiting room
let waitingRoom = {
  participants: [],
  isVoting: false
};

// ─────────────── Enhanced participant creation with database queries ───────────────
async function createParticipant(playerId, catId, socket) {
  console.log(`🔍 Fetching complete data for player ${playerId}, cat ${catId}`);
  
  const participant = {
    playerId,
    catId,
    socket,
    isDummy: false,
    username: `Player_${playerId}`, // fallback
    catName: `Cat_${catId}`, // fallback
    catSpriteUrl: null,
    wornItems: []
  };

  try {
    // Fetch player data
    const playerResult = await DB.query(
      'SELECT id, username FROM players WHERE id = $1',
      [playerId]
    );
    
    if (playerResult.rows.length > 0) {
      const playerRow = playerResult.rows[0];
      if (playerRow.username) {
        participant.username = playerRow.username;
        console.log(`✅ Found username: ${participant.username}`);
      } else {
        console.log(`⚠️ Player ${playerId} has null username, using fallback`);
      }
    } else {
      console.log(`⚠️ No player found with id ${playerId}, using fallback`);
    }

    // Fetch cat data with sprite URL
    const catResult = await DB.query(`
      SELECT 
        pc.cat_id, 
        pc.player_id, 
        pc.name, 
        pc.template,
        ct.sprite_url
      FROM player_cats pc
      LEFT JOIN cat_templates ct ON pc.template = ct.template
      WHERE pc.cat_id = $1 AND pc.player_id = $2
    `, [catId, playerId]);
    
    if (catResult.rows.length > 0) {
      const catRow = catResult.rows[0];
      
      if (catRow.name) {
        participant.catName = catRow.name;
        console.log(`✅ Found cat name: ${participant.catName}`);
      } else {
        console.log(`⚠️ Cat ${catId} has null name, using fallback`);
      }
      
      if (catRow.sprite_url) {
        participant.catSpriteUrl = catRow.sprite_url;
        console.log(`✅ Found cat sprite URL`);
      } else {
        console.log(`⚠️ No sprite URL found for cat ${catId}`);
      }
    } else {
      console.log(`⚠️ No cat found with cat_id=${catId} and player_id=${playerId}`);
      
      // Debug: Check what cats this player has
      const debugResult = await DB.query(
        'SELECT cat_id, player_id, name, template FROM player_cats WHERE player_id = $1',
        [playerId]
      );
      console.log(`🔍 Player ${playerId} has ${debugResult.rows.length} cats:`, debugResult.rows);
    }

    // Fetch worn items
    const itemsResult = await DB.query(`
      SELECT 
        ci.template,
        ci.category,
        it.sprite_url as item_sprite_url
      FROM cat_items ci
      LEFT JOIN itemtemplate it ON ci.template = it.template
      WHERE ci.cat_id = $1
    `, [catId]);
    
    if (itemsResult.rows.length > 0) {
      participant.wornItems = itemsResult.rows.map(item => ({
        template: item.template,
        category: item.category,
        spriteUrl: item.item_sprite_url
      }));
      console.log(`✅ Found ${participant.wornItems.length} worn items`);
    }

  } catch (err) {
    console.error(`❌ Failed to fetch data for player ${playerId}, cat ${catId}:`, err.message);
    // Keep using fallback values
  }

  console.log(`✅ Participant created:`, {
    playerId: participant.playerId,
    catId: participant.catId,
    username: participant.username,
    catName: participant.catName,
    hasSprite: !!participant.catSpriteUrl,
    wornItemsCount: participant.wornItems.length
  });

  return participant;
}

// ─────────────── Game Room Class ───────────────
class GameRoom {
  constructor(participants) {
    this.participants = participants;
    this.isVoting = true;
    this.votingStartTime = Date.now();
    this.isFinalized = false;
    this.votingTimer = null;

    console.log('🗳️ GameRoom created with participants:', this.participants.map(p => p.playerId));
    this.startVotingPhase();
  }

  startVotingPhase() {
    console.log('⏳ Voting phase started');

    // Send voting phase message to all participants
    this.participants.forEach(participant => {
      if (participant.socket?.connected) {
        participant.socket.emit('voting_phase', {
          type: 'voting_phase',
          participants: this.getParticipantsForClient(),
          timerSeconds: VOTING_TIMER
        });
        console.log(`📤 Sent voting_phase to ${participant.playerId}`);
      }
    });

    // Make dummy votes immediately
    this.participants.forEach(participant => {
      if (participant.isDummy) {
        this.makeDummyVote(participant);
      }
    });

    // Set voting timeout
    this.votingTimer = setTimeout(() => {
      console.log('⏰ Voting timeout reached');
      this.handleVotingTimeout();
    }, VOTING_TIMER * 1000);
  }

  makeDummyVote(dummy) {
    const availableCats = this.participants.filter(p => p.catId !== dummy.catId).map(p => p.catId);
    if (availableCats.length > 0) {
      const choice = availableCats[Math.floor(Math.random() * availableCats.length)];
      console.log(`🤖 Dummy ${dummy.playerId} voting for ${choice}`);
      this.handleVote(dummy, choice);
    }
  }

  handleVote(voter, votedCatId) {
    if (this.isFinalized || votedCatId === voter.catId) return;

    voter.votedCatId = votedCatId;
    console.log(`🗳️ ${voter.playerId} voted for ${votedCatId}`);

    this.broadcastVotingUpdate();

    // Check if all voted
    const allVoted = this.participants.every(p => p.votedCatId);
    if (allVoted) {
      console.log('✅ All participants voted. Finalizing...');
      this.finalizeVoting();
    }
  }

  handleVotingTimeout() {
    if (this.isFinalized) return;

    console.log('⏰ VOTING TIMEOUT REACHED - Beginning vote calculation process');
    console.log(`📊 Room status before timeout:`, {
      participantCount: this.participants.length,
      votingStartTime: new Date(this.votingStartTime).toISOString(),
      timeElapsed: ((Date.now() - this.votingStartTime) / 1000).toFixed(1) + 's'
    });

    // Log current voting state
    console.log('🗳️ Current voting state:');
    this.participants.forEach((participant, index) => {
      console.log(`  ${index + 1}. ${participant.username} (${participant.playerId}) - Cat: ${participant.catName} (${participant.catId})`);
      console.log(`     Voted for: ${participant.votedCatId || 'NO VOTE YET'}`);
      console.log(`     Is dummy: ${participant.isDummy || false}`);
    });

    // Assign random votes to non-voters
    console.log('🎲 Assigning random votes to participants who haven\'t voted:');
    let autoVotesAssigned = 0;
    
    this.participants.forEach(participant => {
      if (!participant.votedCatId) {
        const availableCats = this.participants
          .filter(p => p.catId !== participant.catId)
          .map(p => p.catId);
        
        if (availableCats.length > 0) {
          const choice = availableCats[Math.floor(Math.random() * availableCats.length)];
          participant.votedCatId = choice;
          autoVotesAssigned++;
          
          const votedForParticipant = this.participants.find(p => p.catId === choice);
          console.log(`  ⚡ Auto-vote: ${participant.username} → ${votedForParticipant?.catName || choice}`);
        }
      }
    });

    console.log(`✅ Assigned ${autoVotesAssigned} automatic votes`);
    this.finalizeVoting();
  }

  finalizeVoting() {
    if (this.isFinalized) return;
    this.isFinalized = true;

    console.log('🏁 FINALIZING VOTING - No more changes allowed');

    if (this.votingTimer) {
      clearTimeout(this.votingTimer);
      console.log('⏹️ Voting timer cleared');
    }

    this.calculateResults();

    // Show announcement before results
    console.log('📺 Sending "calculating votes" announcement to participants');
    this.participants.forEach(participant => {
      if (participant.socket?.connected) {
        participant.socket.emit('calculating_announcement', {
          type: 'calculating_announcement',
          message: 'CALCULATING VOTES, PLEASE WAIT . . .'
        });
      }
    });

    // Wait 3 seconds then send results
    setTimeout(() => {
      console.log('📤 Sending final results to all participants');
      this.participants.forEach(participant => {
        if (participant.socket?.connected) {
          participant.socket.emit('results', {
            type: 'results',
            participants: this.getParticipantsForClient()
          });
          console.log(`  ✅ Results sent to ${participant.username}`);
        } else {
          console.log(`  ⚠️ Could not send results to ${participant.username} - socket disconnected`);
        }
      });
      
      console.log('🎉 GAME ROOM COMPLETE - All results distributed');
    }, 3000);
  }

  calculateResults() {
    console.log('🧮 CALCULATING VOTE RESULTS');
    console.log('=' .repeat(50));

    // Count votes
    const votes = {};
    console.log('📊 Counting votes:');
    
    this.participants.forEach(voter => {
      if (voter.votedCatId) {
        votes[voter.votedCatId] = (votes[voter.votedCatId] || 0) + 1;
        
        const votedForParticipant = this.participants.find(p => p.catId === voter.votedCatId);
        console.log(`  🗳️ ${voter.username} voted for ${votedForParticipant?.catName || voter.votedCatId}`);
      }
    });

    console.log('📈 Vote tallies:');
    Object.entries(votes).forEach(([catId, voteCount]) => {
      const participant = this.participants.find(p => p.catId.toString() === catId.toString());
      console.log(`  ${participant?.catName || catId}: ${voteCount} vote(s)`);
    });

    // Calculate rewards
    console.log('💰 Calculating coin rewards:');
    let totalCoinsDistributed = 0;
    
    this.participants.forEach(p => {
      p.votesReceived = votes[p.catId] || 0;
      p.coinsEarned = p.votesReceived * 25;
      totalCoinsDistributed += p.coinsEarned;
      
      console.log(`  💎 ${p.catName} (${p.username}): ${p.votesReceived} votes = ${p.coinsEarned} coins`);
    });

    console.log(`🏆 RESULTS SUMMARY:`);
    console.log(`   Total votes cast: ${Object.values(votes).reduce((a, b) => a + b, 0)}`);
    console.log(`   Total coins distributed: ${totalCoinsDistributed}`);
    
    // Sort by votes for ranking display
    const sortedParticipants = [...this.participants].sort((a, b) => b.votesReceived - a.votesReceived);
    console.log(`🥇 Final rankings:`);
    sortedParticipants.forEach((p, index) => {
      const medal = index === 0 ? '🥇' : index === 1 ? '🥈' : '🥉';
      console.log(`   ${medal} ${index + 1}. ${p.catName} - ${p.votesReceived} votes (${p.coinsEarned} coins)`);
    });

    console.log('=' .repeat(50));
  }

  broadcastVotingUpdate() {
    this.participants.forEach(p => {
      if (p.socket?.connected) {
        p.socket.emit('voting_update', {
          type: 'voting_update',
          participants: this.getParticipantsForClient()
        });
      }
    });
  }

  getParticipantsForClient() {
    return this.participants.map(p => ({
      playerId: p.playerId,
      catId: p.catId,
      username: p.username,
      catName: p.catName,
      catSpriteUrl: p.catSpriteUrl,
      wornItems: p.wornItems,
      votedCatId: p.votedCatId,
      votesReceived: p.votesReceived || 0,
      coinsEarned: p.coinsEarned || 0
    }));
  }

  handleParticipantDisconnect(p) {
    if (this.isFinalized) return;

    // Assign random vote if they haven't voted
    if (!p.votedCatId) {
      const options = this.participants.filter(x => x.catId !== p.catId).map(x => x.catId);
      if (options.length > 0) {
        const vote = options[Math.floor(Math.random() * options.length)];
        p.votedCatId = vote;
        console.log(`⚠️ ${p.playerId} disconnected - voting randomly for ${vote}`);

        const allVoted = this.participants.every(p => p.votedCatId);
        if (allVoted) {
          this.finalizeVoting();
        } else {
          this.broadcastVotingUpdate();
        }
      }
    }
  }
}

// ─────────────── Broadcast waiting room updates ───────────────
function broadcastWaitingRoomUpdate() {
  console.log(`📤 Broadcasting waiting room update to ${waitingRoom.participants.length} participants`);
  
  const participantsForClient = waitingRoom.participants.map(p => ({
    playerId: p.playerId,
    catId: p.catId,
    username: p.username,
    catName: p.catName,
    catSpriteUrl: p.catSpriteUrl,
    wornItems: p.wornItems
  }));

  waitingRoom.participants.forEach(p => {
    if (p.socket?.connected) {
      p.socket.emit('participant_update', {
        type: 'participant_update',
        participants: participantsForClient,
        maxCount: PARTICIPANTS_IN_ROOM
      });
    }
  });
}

// ═══════════════════════════════════════════════════════════════
// MAIN SOCKET SETUP FUNCTION 
// ═══════════════════════════════════════════════════════════════

export default function setupSocket(io) {
  const playerSockets = new Map();
  const adminSockets = new Set();

  io.on('connection', (socket) => {
    console.log('User connected:', socket.id);

    // ═══════════════════════════════════════════════════════════════
    // FASHION SHOW SOCKET HANDLERS 
    // ═══════════════════════════════════════════════════════════════

    let currentRoom = null;
    let participant = null;

    socket.on('join', async (message) => {
      console.log('🎭 Fashion Show - Received join:', message);

      if (!message.playerId || !message.catId) {
        console.warn('⚠️ Missing playerId or catId. Disconnecting.');
        return socket.disconnect();
      }

      participant = await createParticipant(message.playerId, message.catId, socket);
      console.log(`✅ Enhanced participant created for ${participant.playerId}`);

      if (waitingRoom.participants.length < PARTICIPANTS_IN_ROOM && !waitingRoom.isVoting) {
        waitingRoom.participants.push(participant);
        currentRoom = waitingRoom;

        console.log(`👥 Waiting room: ${waitingRoom.participants.length}/${PARTICIPANTS_IN_ROOM}`);
        broadcastWaitingRoomUpdate();

        // Launch game room when full
        if (waitingRoom.participants.length === PARTICIPANTS_IN_ROOM) {
          console.log('🚀 Launching game room');
          const gameRoom = new GameRoom([...waitingRoom.participants]);

          waitingRoom.participants.forEach(p => {
            if (!p.isDummy && p.socket) p.socket.gameRoom = gameRoom;
          });

          currentRoom = gameRoom;

          waitingRoom = { participants: [], isVoting: false };
        }
      } else {
        console.warn('❌ Waiting room full or voting. Disconnecting.');
        socket.disconnect();
      }
    });

    socket.on('vote', (message) => {
      console.log('🗳️ Received vote:', message);
      if (currentRoom instanceof GameRoom && participant) {
        currentRoom.handleVote(participant, message.votedCatId);
      }
    });

    // ═══════════════════════════════════════════════════════════════
    // EXISTING TICKET SYSTEM HANDLERS (UNCHANGED)
    // ═══════════════════════════════════════════════════════════════

    // Admin sends a broadcast
    socket.on("adminBroadcast", async ({ message }) => {
      try {
        // 1. Save broadcast to DB
        const insertResult = await DB.query(
          `INSERT INTO broadcasts (body) VALUES ($1) RETURNING *`,
          [message]
        );

        const broadcast = insertResult.rows[0];

        // 2. Emit broadcast to all players
        const playersResult = await DB.query("SELECT id FROM players");
        playersResult.rows.forEach(row => {
          io.to(`user_${row.id}`).emit("adminBroadcast", {
            message: broadcast.body,
            date: broadcast.sent_at
          });
        });

        // 3. Notify all admins that broadcast was sent
        io.to("admins").emit("broadcastSent", {
          message: broadcast.body,
          date: broadcast.sent_at,
          count: playersResult.rows.length
        });

      } catch (err) {
        console.error("Error sending broadcast:", err);
        socket.emit("errorMessage", { message: "Failed to send broadcast." });
      }
    });

    // Admin registers
    socket.on('registerAdmin', () => {
      adminSockets.add(socket.id);
      socket.join('admins');
      console.log(`Admin registered and joined admins room: ${socket.id}`);
    });

    // Player registers and joins all their open ticket rooms
    socket.on('registerPlayer', async (userId) => {
      socket.join(`user_${userId}`);

      playerSockets.set(userId, socket.id);
      console.log(`Registered player ${userId} with socket ${socket.id}`);

      try {
        const result = await DB.query(
          `SELECT ticket_id FROM tickets_table WHERE user_id = $1 AND status = 'open'`,
          [userId]
        );
        result.rows.forEach(row => {
          const ticketRoom = `ticket_${row.ticket_id}`;
          socket.join(ticketRoom);
          console.log(`Player socket joined ticket room: ${ticketRoom}`);
        });
      } catch (err) {
        console.error('Failed to get player tickets:', err);
      }
    });

    // Admin joins a ticket room
    socket.on('joinTicketRoom', ({ ticketId }) => {
      const roomName = `ticket_${ticketId}`;
      socket.join(roomName);
      console.log(`Admin socket ${socket.id} joined ticket room: ${roomName}`);
    });

    // Player sends message
    socket.on('playerMessage', async ({ ticketId, userId, text }) => {
      const roomName = `ticket_${ticketId}`;
      console.log(`Player ${userId} sent message for ticket ${ticketId}: ${text}`);

      try {
        await DB.query(
          `INSERT INTO messages_table (ticket_id, sender, content, timestamp) VALUES ($1, 'user', $2, NOW())`,
          [ticketId, text]
        );
      } catch (err) {
        console.error('Error saving message:', err);
      }

      io.to(roomName).emit('newMessage', {
        sender: 'user',
        content: text,
        ticketId,
        userId
      });
    });

    // Player opens ticket
    socket.on('openTicketRequest', async ({ userId }, callback) => {
      try {
        const result = await DB.query(
          `SELECT * FROM tickets_table WHERE user_id = $1 AND status = 'open' ORDER BY created_at DESC LIMIT 1`,
          [userId]
        );

        if (result.rows.length > 0) {
          callback({ ticket: result.rows[0] });
        } else {
          const insertResult = await DB.query(
            `INSERT INTO tickets_table (user_id, status) VALUES ($1, 'open') RETURNING *`,
            [userId]
          );

          const newTicket = insertResult.rows[0];

          // To notify all admins of new ticket
          io.to('admins').emit('newTicketCreated', newTicket);

          callback({ ticket: newTicket });
        }
      } catch (err) {
        console.error('Error in openTicketRequest:', err);
        callback({ error: 'Failed to open or create ticket' });
      }
    });

    // Admin sends message
    socket.on('adminMessage', async ({ ticketId, text }) => {
      const roomName = `ticket_${ticketId}`;
      console.log(`Admin sent message to ticket ${ticketId}: ${text}`);

      try {
        await DB.query(
          `INSERT INTO messages_table (ticket_id, sender, content, timestamp) VALUES ($1, 'admin', $2, NOW())`,
          [ticketId, text]
        );
      } catch (err) {
        console.error('Error saving message:', err);
      }

      io.to(roomName).emit('newMessage', {
        sender: 'admin',
        content: text,
        ticketId
      });
    });

    // Admin closes ticket via socket
    socket.on('closeTicket', async ({ ticketId }) => {
      try {
        // Update DB
        await DB.query(
          `UPDATE tickets_table SET status = 'closed' WHERE ticket_id = $1`,
          [ticketId]
        );

        console.log(`Ticket ${ticketId} closed by admin.`);

        // Broadcast to all in that ticket room
        io.to(`ticket_${ticketId}`).emit('ticketClosed', { ticketId });

      } catch (err) {
        console.error('Error closing ticket:', err);
        socket.emit('errorMessage', { message: 'Failed to close ticket.' });
      }
    });

    // ═══════════════════════════════════════════════════════════════
    // DISCONNECT HANDLER (UPDATED TO HANDLE BOTH SYSTEMS)
    // ═══════════════════════════════════════════════════════════════

    socket.on('disconnect', () => {
      console.log('User disconnected:', socket.id);

      // Handle fashion show disconnect
      if (participant) {
        if (currentRoom === waitingRoom) {
          const idx = waitingRoom.participants.indexOf(participant);
          if (idx > -1) {
            waitingRoom.participants.splice(idx, 1);
            broadcastWaitingRoomUpdate();
            console.log(`👤 ${participant.playerId} left waiting room`);
          }
        } else if (currentRoom instanceof GameRoom) {
          currentRoom.handleParticipantDisconnect(participant);
          console.log(`👤 ${participant.playerId} disconnected during game`);
        }
      }

      // Cleanup admin and player sockets
      adminSockets.delete(socket.id);
      for (const [userId, socketId] of playerSockets.entries()) {
        if (socketId === socket.id) {
          playerSockets.delete(userId);
          break;
        }
      }
    });
  });
}